Import module for testing:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Gimme dem tests:

    >>> test_bg = BaseGeometry()
    
    >>> test_bg.integer_validator("my_dude", 33)

    Traceback test for area:
    >>> test_bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    Int test, passing a string:
    >>> test_bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    Int value/type tests:
        >>> test_bg.integer_validator("age", 0)
        Traceback (most recent call last):
        ValueError: age must be greater than 0
        
        >>> test_bg.integer_validator("distance", -9)
        Traceback (most recent call last):
        ValueError: distance must be greater than 0

        >>> test_bg.integer_validator("jim", 6.9)
        Traceback (most recent call last):
        TypeError: jim must be an integer

        >>> test_bg.integer_validator("average")
        Traceback (most recent call last):
        TypeError: integer_validator() missing 1 required positional argument: 'value'

        >>> test_bg.integer_validator()
        Traceback (most recent call last):
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

        >>> test_bg.integer_validator("dan", (9,))
        Traceback (most recent call last):
        TypeError: dan must be an integer

        >>> test_bg.integer_validator("stan", [6])
        Traceback (most recent call last):
        TypeError: stan must be an integer

        >>> test_bg.integer_validator("bobby", {3, 4})
        Traceback (most recent call last):
        TypeError: bobby must be an integer

        >>> test_bg.integer_validator("timmy", None)
        Traceback (most recent call last):
        TypeError: timmy must be an integer